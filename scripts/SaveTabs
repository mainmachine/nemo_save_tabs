#!/usr/bin/env ruby

require 'socket'
require 'json'
require 'yaml'

# nautilus module
module Nautilus
  # save tabs
  class SaveTabs
    load "#{ENV['HOME']}/.config/nautilus/save_tabs"

    def key(keys)
      p = 'xdotool key ' + keys
      #  p = "xdotool --delay" + KEY_DELAY + keys
      system(p)
      sleep(SLEEP_TIME_SAVE)
    end

    def read_socket
      Thread.start do
        Socket.unix_server_loop(SOCKET_PATH) do |sock, _addr|
          @uris = JSON.parse(sock.read)
          break
        end
      end
    end

    def read_tab
      thread = read_socket
      key(SHORTCUT_GETURIS)
      thread.join
      @uris
    end

    def first_tab
      nth_tab(1)
    end

    def next_tab
      key('control+Page_Down')
      read_tab
    end

    def prev_tab
      key('control+Page_Up')
      read_tab
    end

    def nth_tab(n)
      n = [9, [0, n].max].min
      key("alt+#{n}")
      read_tab
    end

    def last_tab
      first_tab
      prev_tab
    end

    def uris_forward
      uris = [first_tab]
      @max_tab.times do
        uris << next_tab
      end
      uris
    end

    def uris_backward
      uris = [last_tab]
      @max_tab.times do
        uris << prev_tab
      end
      uris
    end

    # Array -> Array -> Array
    def longest_match_first(x, y)
      0.upto(y.size) do |i|
        j = y.size - i
        return(x.first(j)) if x.first(j) == y.rotate(i).first(j)
      end
      []
    end

    def divisors(n)
      (1..n).select { |i| (n % i).zero? }
    end

    # Array -> Array
    def minimum_recurrence(array)
      divisors(array.size).each do |i|
        u = array.each_slice(i).to_a.uniq
        return(u.first) if u.size == 1
      end
    end

    def save_tabs(obj)
      File.open(SAVE_TABS_PATH, 'w') { |f| f.write obj.to_yaml }
    end

    def tabs_array(min, max)
      0.upto(Math.log2(max / min)).to_a.map do |i|
        min * 2**i
      end + [max]
    end

    def scan_tabs
      tabs_array(MIN_TAB, MAX_TAB).each do |tab|
        @max_tab = tab
        l = longest_match_first(uris_forward, uris_backward.reverse)
        return(l) unless l.empty?
      end
      system('zenity --warning --text "MAX_TAB is too small"')
      uris_forward
    end

    def initialize
      uris = minimum_recurrence(scan_tabs)
      system("zenity --list \
                    --title='Session saved' \
                    --width=800 --height=600 \
                    --column='Name' --column='Value' \
                    'uris' #{uris}")
      save_tabs(uris)
    end
  end
end

# sleep a second to ensure the key to invoke the script is released
sleep(1)
Nautilus::SaveTabs.new
