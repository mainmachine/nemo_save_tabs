#!/usr/bin/env ruby

require 'yaml'
require 'uri'

# nautilus module
module Nautilus
  # configurations
  class Config
    attr_reader(:config)
    def initialize
      @config = {
        'sleep_time_restore' => 0.3,
        'select_uri_delay' => 100,
        'save_tabs_path' => ENV['HOME'] + '/.local/share/nautilus/tabs',
        'socket_path' => '/tmp/nautilus_' + ENV['USER'] + '.socket'
      }
    end

    def load
      @config = @config.merge(YAML.load_file(
                                "#{ENV['HOME']}/.config/nautilus/save_tabs"
      ))
    end
  end
  # restore tabs
  class RestoreTabs
    def key(keys)
      p = 'xdotool key ' + keys
      system(p)
      sleep(@config.config['sleep_time_restore'])
    end

    def type(keys, delay = nil)
      p = if delay
            "xdotool type --delay=#{delay} '#{keys}'"
          else
            "xdotool type '#{keys}'"
          end
      system(p)
      sleep(@config.config['sleep_time_restore'])
    end

    def load_tabs
      YAML.load_file(@config.config['save_tabs_path'])
    end

    def select_uri(uri)
      return if uri.last.empty?
      type(File.basename(URI.decode(URI.parse(uri.last.split("\n").first).path)),
           @config.config['select_uri_delay'])
      key('Escape')
    end

    def open_uri(uri)
      key('control+l')
      type(URI.decode(uri.first))
      key('Return')
      select_uri(uri)
    end

    def open_tab(uri)
      key('control+t')
      open_uri(uri)
    end

    def initialize
      @config = Config.new
      uris = load_tabs
      open_uri(uris.shift)
      uris.each { |uri| open_tab(uri) }
    end
  end
end

sleep(0.3)
Nautilus::RestoreTabs.new
